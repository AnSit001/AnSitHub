--[[ 
  
  
  
  
                AAA                                  SSSSSSSSSSSSSSS   iiii          tttt           
               A:::A                               SS:::::::::::::::S i::::i      ttt:::t           
              A:::::A                             S:::::SSSSSS::::::S  iiii       t:::::t           
             A:::::::A                            S:::::S     SSSSSSS             t:::::t           
            A:::::::::A         nnnn  nnnnnnnn    S:::::S            iiiiiiittttttt:::::ttttttt     
           A:::::A:::::A        n:::nn::::::::nn  S:::::S            i:::::it:::::::::::::::::t     
          A:::::A A:::::A       n::::::::::::::nn  S::::SSSS          i::::it:::::::::::::::::t     
         A:::::A   A:::::A      nn:::::::::::::::n  SS::::::SSSSS     i::::itttttt:::::::tttttt     
        A:::::A     A:::::A       n:::::nnnn:::::n    SSS::::::::SS   i::::i      t:::::t           
       A:::::AAAAAAAAA:::::A      n::::n    n::::n       SSSSSS::::S  i::::i      t:::::t           
      A:::::::::::::::::::::A     n::::n    n::::n            S:::::S i::::i      t:::::t           
     A:::::AAAAAAAAAAAAA:::::A    n::::n    n::::n            S:::::S i::::i      t:::::t    tttttt 
    A:::::A             A:::::A   n::::n    n::::nSSSSSSS     S:::::Si::::::i     t::::::tttt:::::t 
   A:::::A               A:::::A  n::::n    n::::nS::::::SSSSSS:::::Si::::::i     tt::::::::::::::t 
  A:::::A                 A:::::A n::::n    n::::nS:::::::::::::::SS i::::::i       tt:::::::::::tt 
 AAAAAAA                   AAAAAAAnnnnnn    nnnnnn SSSSSSSSSSSSSSS   iiiiiiii         ttttttttttt   
  
  
  
  
  
  
 ]]--















bit32 = {};
local N = 32;
local P = 2 ^ N;
bit32.bnot = function(x)
	x = x % P;
	return (P - 1) - x;
end;
bit32.band = function(x, y)
	if (y == 255) then
		return x % 256;
	end
	if (y == 65535) then
		return x % 65536;
	end
	if (y == 4294967295) then
		return x % 4294967296;
	end
	x, y = x % P, y % P;
	local r = 0;
	local p = 1;
	for i = 1, N do
		local a, b = x % 2, y % 2;
		x, y = math.floor(x / 2), math.floor(y / 2);
		if ((a + b) == 2) then
			r = r + p;
		end
		p = 2 * p;
	end
	return r;
end;
bit32.bor = function(x, y)
	if (y == 255) then
		return (x - (x % 256)) + 255;
	end
	if (y == 65535) then
		return (x - (x % 65536)) + 65535;
	end
	if (y == 4294967295) then
		return 4294967295;
	end
	x, y = x % P, y % P;
	local r = 0;
	local p = 1;
	for i = 1, N do
		local a, b = x % 2, y % 2;
		x, y = math.floor(x / 2), math.floor(y / 2);
		if ((a + b) >= 1) then
			r = r + p;
		end
		p = 2 * p;
	end
	return r;
end;
bit32.bxor = function(x, y)
	x, y = x % P, y % P;
	local r = 0;
	local p = 1;
	for i = 1, N do
		local a, b = x % 2, y % 2;
		x, y = math.floor(x / 2), math.floor(y / 2);
		if ((a + b) == 1) then
			r = r + p;
		end
		p = 2 * p;
	end
	return r;
end;
bit32.lshift = function(x, s_amount)
	if (math.abs(s_amount) >= N) then
		return 0;
	end
	x = x % P;
	if (s_amount < 0) then
		return math.floor(x * (2 ^ s_amount));
	else
		return (x * (2 ^ s_amount)) % P;
	end
end;
bit32.rshift = function(x, s_amount)
	if (math.abs(s_amount) >= N) then
		return 0;
	end
	x = x % P;
	if (s_amount > 0) then
		return math.floor(x * (2 ^ -s_amount));
	else
		return (x * (2 ^ -s_amount)) % P;
	end
end;
bit32.arshift = function(x, s_amount)
	if (math.abs(s_amount) >= N) then
		return 0;
	end
	x = x % P;
	if (s_amount > 0) then
		local add = 0;
		if (x >= (P / 2)) then
			add = P - (2 ^ (N - s_amount));
		end
		return math.floor(x * (2 ^ -s_amount)) + add;
	else
		return (x * (2 ^ -s_amount)) % P;
	end
end;
local TABLE_TableIndirection = {};
